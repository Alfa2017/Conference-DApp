var accounts, account;
var accountpwd = "1";
var clientpwd = "12346Uirfk*90frHKlDeweTr";
var optimize = 1;
var myConferenceInstance;


// Initialize
function initializeConference() {
	var cabi;
	var cexist = false;
	//address = address00;

	var address = "0xb44a787ddb8c0ec7fd06bd785531dac08b894d3b";
	//var cabi = [{"constant":true,"inputs":[{"name":"room_","type":"bytes32"}],"name":"GetMeeting","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"room_","type":"bytes32"}],"name":"DeleteMeeting","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"room_","type":"bytes32"},{"name":"note_","type":"string"}],"name":"AddMeeting","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"room_","type":"bytes32"},{"name":"key_","type":"string"}],"name":"DeletePerson","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"GetMeetings","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"room_","type":"bytes32"},{"name":"key_","type":"string"}],"name":"CheckPerson","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"room_","type":"bytes32"},{"name":"key_","type":"string"},{"name":"name_","type":"string"}],"name":"AddPerson","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}];

	//crypto
	//var ciphertext = CryptoJS.AES.encrypt('test message for client', clientpwd).toString();
	//var plaintext = CryptoJS.AES.decrypt(ciphertext, clientpwd).toString(CryptoJS.enc.Utf8);

	//get code of smart-contract Conference
	web3.eth.getCode(address, (error, result) => {
		if(error != null) {
			$("#confAddress").html("error!");
		}
		else {
			var sver = "soljson-v0.4.24+commit.e67f0147.js";
			var source = $('#smartContractCode').find('pre').text();

			//get avilable versions
			//BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {
			//});
			
			var bytecode = "0x";
			var conferenceContract;
			BrowserSolc.loadVersion(sver, function(c) {
				compiler = c;
				console.log("Solc Version Loaded: " + sver);

				var output = compiler.compile(source, optimize);
				var stringResult = JSON.stringify(output);

				bytecode = bytecode + output.contracts[':Conference'].bytecode;
				cabi = JSON.parse(output.contracts[':Conference'].interface);

				if( result == "0x" ) {
					conferenceContract = new web3.eth.Contract(cabi);
					conferenceContract.deploy({
						//data: ""
						data: bytecode
					})
					.send({
						from: account,
						gas: 4700000
					})
					.then((newContractInstance) => {
						$("#confAddress").html(newContractInstance.options.address);
						myConferenceInstance = newContractInstance;
						//console.log(newContractInstance.options.address); // instance with the new contract address
					});
				} else {
					conferenceContract = new web3.eth.Contract(cabi, address);
					$("#confAddress").html(conferenceContract.options.address);
					myConferenceInstance = conferenceContract;
				}
			});
		}
	});
}

// Add Meeting
function addMeeting(room, note) {
	var room_= web3.utils.utf8ToHex(room); // convert string to hex (for bytes32)

	//unlock account for executing method of smart-contract
	web3.eth.personal.unlockAccount(account, accountpwd, 15000).then((response) => {
		myConferenceInstance.methods.AddMeeting(room_, note).send({from: account, gas: 2000000}).then((receipt) => {
			$("#MeetingResult").html(receipt.transactionHash)
		}).catch((error) => {
			$("#MeetingResult").html("error");
			console.log(error);
		});
	}).catch((error) => {
		console.log(error);
	});
}

function delMeeting(room) {
	var room_ = web3.utils.utf8ToHex(room);

	//unlock account for executing method of smart-contract
	web3.eth.personal.unlockAccount(account, accountpwd, 15000).then((response) => {
		//execute the method of smart-contract
		myConferenceInstance.methods.DeleteMeeting(room_).send({from: account, gas: 2000000}).then((receipt) => {
			$("#MeetingResult").html(receipt.transactionHash)
		}).catch((error) => {
			$("#MeetingResult").html("error");
			console.log(error);
		});
	}).catch((error) => {
		console.log(error);
	});
}

function checkPerson(room, pkey) {
	var res = "Person NOT found";
	var room_ = web3.utils.utf8ToHex(room);
	//var pkey_ = web3.utils.utf8ToHex(pkey);
	
	var pkey_ = CryptoJS.AES.encrypt(pkey, clientpwd).toString();

	//execute the method of smart-contract
	myConferenceInstance.methods.CheckPerson(room_, pkey_).call({from: account}, (error, result) => {
		if (result) {
			res = "Person found";
		}
		$("#checkPersonResult").html(res)
	});
}

function addPerson(room, pkey, pname) {
	var room_ = web3.utils.utf8ToHex(room);
	//var pkey_ = web3.utils.utf8ToHex(pkey);

	var pkey_ = CryptoJS.AES.encrypt(pkey, clientpwd).toString();

	//unlock account for executing method of smart-contract
	web3.eth.personal.unlockAccount(account, accountpwd, 15000).then((response) => {
		//execute the method of smart-contract
		myConferenceInstance.methods.AddPerson(room_, pkey_, pname).send({from: account, gas: 2000000}).then((receipt) => {
			$("#PersonResult").html(receipt.transactionHash)
		}).catch((error) => {
			$("#PersonResult").html("error");
			console.log(error);
		});
	}).catch((error) => {
		console.log(error);
	});
}

function delPerson(room, pkey) {
	var room_ = web3.utils.utf8ToHex(room);
	//var pkey_ = web3.utils.utf8ToHex(pkey);

	var pkey_ = CryptoJS.AES.encrypt(pkey, clientpwd).toString();

	//unlock account for executing method of smart-contract
	web3.eth.personal.unlockAccount(account, accountpwd, 15000).then((response) => {
		//execute the method of smart-contract
		myConferenceInstance.methods.DeletePerson(room_, pkey_).send({from: account, gas: 2000000}).then((receipt) => {
			$("#PersonResult").html(receipt.transactionHash)
		}).catch((error) => {
			$("#PersonResult").html("error");
			console.log(error);
		});
	}).catch((error) => {
		console.log(error);
	});
}

// --------------------------------------------------
window.onload = function() {

	// Initialize web3 and set the provider to the testRPC.
	if (typeof web3 !== 'undefined') {
		web3 = new Web3(web3.currentProvider);
	} else {
		var web3Provider;
		// set the provider you want from Web3.providers
		web3Provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');
		//web3Provider = new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/954ef207d6fd42bb834d7b3f8c0f02df');
		web3 = new Web3(web3Provider);
	}

	//get list of blockchain accounts
	web3.eth.getAccounts(function(err, accs) {
		if (err != null) {
			alert("There was an error fetching your accounts.");
			return;
		}
		if (accs.length == 0) {
			alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
			return;
		}
		accounts = accs;
		if(accounts.length > 2) account = accounts[3]; // store working account
		else account = accounts[0];
		
		initializeConference();
	});

	// Wire up the UI elements
	$("#addMeeting").click(function() {
		var room = $("#roomNumber").val();
		var note = $("#roomNote").val();
		addMeeting(room, note);
	});

	$("#delMeeting").click(function() {
		var room = $("#roomNumber").val();
		delMeeting(room);
	});

	$("#checkPerson").click(function() {
		var room = $("#roomNumber").val();
		var pkey = $("#personKey").val();
		checkPerson(room, pkey);
	});

	$("#addPerson").click(function() {
		var room = $("#roomNumber").val();
		var client = $("#personKey").val();
		var pname = $("#personName").val();
		addPerson(room, client, pname);
	});

	$("#delPerson").click(function() {
		var room = $("#roomNumber").val();
		var client = $("#personKey").val();
		delPerson(room, client);
	});
	
	$("#showSmartContract").click(function() {
		var visibleCode = $('#smartContractCode').is(":visible");
		$('#smartContractCode').toggle();
		$("#showSmartContract").text(visibleCode ? 'Hide' : 'Show');
	});	
	
	// Set value of wallet to accounts[1]
	//$("#ownerAddress").val(accounts[3]);
};
